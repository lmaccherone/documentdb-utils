// Generated by CoffeeScript 1.9.2
(function() {
  var generateData;

  generateData = function(memo) {
    var collection, collectionLink, getIndex, getRandomValue, i, key, keys, len, possibleValues, queued, row, value;
    if ((memo != null ? memo.remaining : void 0) == null) {
      throw new Error('generateData must be called with an object containing a `remaining` field.');
    }
    if (memo.totalCount == null) {
      memo.totalCount = 0;
    }
    memo.countForThisRun = 0;
    possibleValues = {
      ProjectHierarchy: [[1, 2, 3], [1, 2, 4], [1, 2], [5], [5, 6]],
      Priority: [1, 2, 3, 4],
      Severity: [1, 2, 3, 4],
      Points: [null, 0.5, 1, 2, 3, 5, 8, 13],
      State: ['Backlog', 'Ready', 'In Progress', 'In Testing', 'Accepted', 'Shipped']
    };
    getIndex = function(length) {
      return Math.floor(Math.random() * length);
    };
    getRandomValue = function(possibleValues) {
      var index;
      index = getIndex(possibleValues.length);
      return possibleValues[index];
    };
    keys = (function() {
      var results;
      results = [];
      for (key in possibleValues) {
        value = possibleValues[key];
        results.push(key);
      }
      return results;
    })();
    collection = getContext().getCollection();
    collectionLink = collection.getSelfLink();
    queued = true;
    while (memo.remaining > 0 && queued) {
      row = {};
      for (i = 0, len = keys.length; i < len; i++) {
        key = keys[i];
        row[key] = getRandomValue(possibleValues[key]);
      }
      getContext().getResponse().setBody(memo);
      queued = collection.createDocument(collectionLink, row);
      if (queued) {
        memo.remaining--;
        memo.countForThisRun++;
        memo.totalCount++;
      }
    }
    getContext().getResponse().setBody(memo);
    return memo;
  };

  exports.generateData = generateData;

}).call(this);

//# sourceMappingURL=createVariedDocuments.js.map
