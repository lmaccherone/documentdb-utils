// Generated by CoffeeScript 1.9.2
(function() {
  var deleteSomeDocuments;

  deleteSomeDocuments = function(memo) {
    var collection, onReadDocuments, query, setBody, stillQueuingOperations;
    collection = getContext().getCollection();
    if (memo == null) {
      memo = {};
    }
    if (memo.deleted == null) {
      memo.deleted = [];
    }
    stillQueuingOperations = true;
    query = function() {
      var responseOptions;
      if (stillQueuingOperations) {
        responseOptions = {
          pageSize: memo.remaining
        };
        setBody();
        return stillQueuingOperations = collection.readDocuments(collection.getSelfLink(), responseOptions, onReadDocuments);
      }
    };
    onReadDocuments = function(err, resources, options) {
      var documentLink, etag, oldDocument, queued, results;
      if (err) {
        throw err;
      }
      if (resources.length !== memo.remaining) {
        throw new Error("Expected memo.remaining (" + memo.remaining + ") and the number of rows returned (" + resources.length + ") to match. They don't.");
      }
      queued = true;
      results = [];
      while (memo.remaining > 0 && queued) {
        oldDocument = resources[memo.remaining - 1];
        documentLink = oldDocument._self;
        etag = oldDocument._etag;
        options = {
          etag: etag
        };
        getContext().getResponse().setBody(memo);
        queued = collection.deleteDocument(documentLink, options);
        if (queued) {
          memo.deleted.push(oldDocument);
          results.push(memo.remaining--);
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    setBody = function() {
      return getContext().getResponse().setBody(memo);
    };
    query();
    return memo;
  };

  exports.deleteSomeDocuments = deleteSomeDocuments;

}).call(this);

//# sourceMappingURL=deleteSomeDocuments.js.map
